#! /bin/sh

set -eu

cd "$( dirname "$( readlink -e "${0}" )" )" || exit 1

trace=${TRACE:-}

DISTRO='ubuntu'
docker='docker'
extra_build_args=''
arg=''

if command -v podman >/dev/null 2>&1; then
	docker='podman'
	extra_build_args='--format docker'
fi

[ -d dell ]

if echo " ${1:-} " | grep -Eq -- ' -(h|-help) '; then
	echo >&2 "Usage: $( basename "${0}" ) [<dsu|ism> [command]]"
	exit 0
elif [ -n "${1:-}" ]; then
	arg="${1}"
	shift
	[ "${arg}" = 'dsu' ] && arg='centos'
	[ "${arg}" = 'ism' ] && arg='ubuntu'

	if [ -e "dell/Dockerfile.${arg}" ]; then
		DISTRO="${arg}"
	else
		echo >&2 "FATAL: Configuration file 'dell/Dockerfile.${arg}' does not exist"
		exit 1
	fi
fi

[ -e "dell/Dockerfile.${DISTRO}" ]

if [ $(( $( id -u ) )) -ne 0 ]; then
	echo >&2 "FATAL: Please re-run '$( basename "${0}" )' as user 'root'"
	exit 1
fi

#UBUNTU='20.04'
# 'latest' is always the most recent LTS release, whereas 'rolling' is the most
# recent GA release:
UBUNTU='latest'

#CENTOS='8'
# 'latest' is always the most recent GA release:
CENTOS='latest'

#DSU="20.05.00"
DSU="$( curl -s https://linux.dell.com/repo/hardware/ | grep 'Dell System Update_' | head -n 1 | cut -d'_' -f 2 | cut -d'/' -f 1 )" || exit 1

# There doesn't seem to be a viable means to determine the latest Service
# Module version automatically :(
ISM="351"

lsmod | grep -q -- ipmi_devintf || modprobe ipmi_devintf || echo >&2 "WARN: Cannot load IPMI device interface driver"
lsmod | grep -q -- dcdbas       || modprobe dcdbas       || echo >&2 "WARN: Cannot load Dell Systems Management Base Driver"
lsmod | grep -q -- dell_rbu     || modprobe dell_rbu     || echo >&2 "WARN: Cannot load Driver for updating BIOS image on DELL systems"

cd dell

[ -e /dev/log ] || echo >&2 "FATAL: /dev/log does not exist"
devlog="$( readlink -e /dev/log )"

[ -n "${trace:-}" ] && set -o xtrace

case "${DISTRO}" in
	centos)
		mkdir -p /var/log/dell/dsu /var/log/dell/srvadmin

		if ! [ "$( $docker image ls -n "dell-dsu:${DSU}" | wc -l )" = '1' ]; then
			echo "Building Dell iDRAC DSU utilities v${DSU} for '${DISTRO}' distribution ..."

			trap '' INT
			$docker pull "centos:${CENTOS}"
			trap - INT

			$docker build \
					--build-arg DSU="${DSU}" \
					--build-arg SET_TERM="${TERM}" \
					--compress \
					--file "Dockerfile.${DISTRO}" \
					--pull \
					--tag "dell-dsu:${DSU}" \
				.
					#--network slirp4netns \
		fi

		echo "Running Dell iDRAC DSU utilities v${DSU} for '${DISTRO}' distribution ..."

		trap '' INT
		$docker rm "dell-dsu-${DSU}" 2>/dev/null || :
		trap - INT

		$docker run \
				--device /dev/ipmi0:/dev/ipmi0 \
				--init \
				--interactive \
				--mount type=bind,source=/var/log/dell,destination=/var/log \
				--mount type=bind,source=/var/log/dell/dsu,destination=/usr/libexec/dell_dup \
				--mount type=bind,source=/var/log/dell/srvadmin,destination=/opt/dell/srvadmin/var/log \
				--volume "${devlog}":/dev/log \
				--name="dell-dsu-${DSU}" \
				--privileged \
				--rm \
				--tty \
			"dell-dsu:${DSU}" "${@}"
				#--detach \
				#--network slirp4netns \
				#--publish-all \
				#--publish 1311:1311 \
				#--restart=always \
				# sysctl is not virtualised!
				#--sysctl net.ipv6.conf.default.disable_ipv6=1 \
				#--sysctl net.ipv6.conf.all.disable_ipv6=1 \
		;;

	ubuntu)
		mkdir -p /var/log/dell/ism

		if ! [ "$( $docker image ls -n "dell-ism:${ISM}" | wc -l )" = '1' ]; then
			echo "Building Dell iDRAC ISM utilities v${ISM} for '${DISTRO}' distribution ..."

			trap '' INT
			$docker pull "ubuntu:${UBUNTU}"
			trap - INT

			# shellcheck disable=SC2086
			$docker build \
					  ${extra_build_args} \
					--build-arg OSVER="${UBUNTU}" \
					--build-arg ISM="${ISM}" \
					--build-arg SET_TERM="${TERM}" \
					--compress \
					--file "Dockerfile.${DISTRO}" \
					--pull \
					--tag "dell-ism:${ISM}" \
				.
					#--network slirp4netns \
		fi

		echo "Running Dell iDRAC ISM utilities v${ISM} for '${DISTRO}' distribution ..."

		trap '' INT
		$docker rm "dell-ism-${ISM}" 2>/dev/null || :
		trap - INT

		$docker run \
				--detach \
				--device /dev/ipmi0:/dev/ipmi0 \
				--init \
				--mount type=bind,source=/var/log/dell,destination=/var/log \
				--mount type=bind,source=/var/log/dell/ism,destination=/opt/dell/srvadmin/iSM/var/log \
				--name="dell-ism-${ISM}" \
				--network host \
				--privileged \
				--rm \
				--volume "${devlog}":/dev/log \
			"dell-ism:${ISM}" "${@}"
				#--publish-all \
				#--restart=always \
				# Can no longer use 'cap-add' with 'privileged'
				#--cap-add SYS_RAWIO \
				#--cap-add IPC_LOCK \
				# sysctl is not virtualised!
				#--sysctl net.ipv6.conf.default.disable_ipv6=1 \
				#--sysctl net.ipv6.conf.all.disable_ipv6=1 \
		;;
esac

# vi: set syntax=sh:
