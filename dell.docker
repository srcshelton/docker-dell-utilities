#! /bin/sh

# DSU uses more than 512MB when applying updates...
#
# Tiny
#: "${PODMAN_MEMORY_RESERVATION:=256m}"
#: "${PODMAN_MEMORY_LIMIT:=512m}"
#: "${PODMAN_SWAP_LIMIT:=1g}"
# Small
: "${PODMAN_MEMORY_RESERVATION:=512m}"
: "${PODMAN_MEMORY_LIMIT:=1g}"
: "${PODMAN_SWAP_LIMIT:=2g}"
# Medium
#: "${PODMAN_MEMORY_RESERVATION:=1g}"
#: "${PODMAN_MEMORY_LIMIT:=2g}"
#: "${PODMAN_SWAP_LIMIT:=4g}"
# Large
#: "${PODMAN_MEMORY_RESERVATION:=2g}"
#: "${PODMAN_MEMORY_LIMIT:=4g}"
#: "${PODMAN_SWAP_LIMIT:=8g}"
# Extra-Large
#: "${PODMAN_MEMORY_RESERVATION:=4g}"
#: "${PODMAN_MEMORY_LIMIT:=8g}"
#: "${PODMAN_SWAP_LIMIT:=16g}"

set -eu

cd "$( dirname "$( readlink -e "${0}" )" )" || exit 1

trace=${TRACE:-}

arg=''
check=0
DISTRO='ubuntu'
docker='docker'
extra_build_args=''
root=''
skip=0

if command -v podman >/dev/null 2>&1; then
	docker='podman'
	extra_build_args='--format docker'
fi

[ -d dell ]

while [ -n "${1:-}" ] && [ $(( skip )) -eq 0 ]; do
	case "${1}" in
		-h|--help)
			echo >&2 "Usage: $( basename "${0}" ) [<dsu|ism> [--check|-- <command>]]"
			exit 0
			;;
		-c|--check)
			check=1
			;;
		-d|--dsu|dsu|centos|rocky)
			arg='centos'
			;;
		-i|--ism|ism|ubuntu)
			arg='ubuntu'
			;;
		-r=*|--root=*)
			root="$( echo "${1}" | cut -d'=' -f 2- )"
			;;
		-r|--root)
			if [ -z "${2:-}" ]; then
				echo >&2 "FATAL: option '${1}' requires an argument"
				exit 1
			fi
			shift
			root="${1:-}"
			;;
		--)
			skip=1
			;;
		*)
			echo >&2 "FATAL: Unknown option '${1}'"
			exit 1
			;;
	esac
	shift
done
if [ $(( $( id -u ) )) -ne 0 ]; then
	echo >&2 "FATAL: Please re-run '$( basename "${0}" )' as user 'root'"
	exit 1
fi

if [ -n "${root:-}" ] && ! [ -d "${root}" ]; then
	echo >&2 "FATAL: image directory '${root}' does not exist"
	exit 1
fi
if [ -e "dell/Dockerfile.${arg}" ]; then
	DISTRO="${arg}"
else
	echo >&2 "FATAL: Configuration file 'dell/Dockerfile.${arg}' does not exist"
	exit 1
fi
unset arg

[ -e "dell/Dockerfile.${DISTRO}" ]

OMREPO='http://linux.dell.com/repo/community/openmanage'
HWREPO='https://linux.dell.com/repo/hardware'

#ISM='351'
ISM="$(
	curl -fLsS "${OMREPO}/" |
	grep 'iSM' |
	grep -Eo '<a href="iSM/[0-9]+">iSM/[0-9]+/<' |
	cut -d'/' -f 3 |
	sort -n |
	tail -n 1
)"

# See http://linux.dell.com/repo/community/openmanage/
#OSMA='950'
OSMA="$(
	curl -fLsS "${OMREPO}/" |
	grep -v 'iSM' |
	grep -Eo '<a href="[0-9]+/">[0-9]+/<' |
	cut -d '"' -f 2 |
	sed 's|/||g' |
	sort -n |
	tail -n 1
)"

# This *must* be set to the release name of the chosen OS version, which must
# exist as a sub-directory
# beneath http://linux.dell.com/repo/community/openmanage/${OSMA}/ and
# http://linux.dell.com/repo/community/openmanage/iSM/${ISM}/
#UBUNTU='bionic'
UBUNTU='focal'

# 'latest' is always the most recent GA release:
#CENTOS='latest'
# ... but CentOS was killed-off at release 8 :(
CENTOS='8'

#DSU='20.05.00'
DSU="$( curl -s "${HWREPO}/" | grep 'Dell System Update_' | head -n 1 | cut -d'_' -f 2 | cut -d'/' -f 1 )" || exit 1

lsmod | grep -q -- ipmi_devintf || modprobe ipmi_devintf || echo >&2 "WARN: Cannot load IPMI device interface driver"
lsmod | grep -q -- dcdbas       || modprobe dcdbas       || echo >&2 "WARN: Cannot load Dell Systems Management Base Driver"
lsmod | grep -q -- dell_rbu     || modprobe dell_rbu     || echo >&2 "WARN: Cannot load Driver for updating BIOS image on DELL systems"

cd dell

if ! [ -e /dev/log ]; then
	echo >&2 "FATAL: /dev/log does not exist"
	exit 1
fi
devlog="$( readlink -e /dev/log )"

[ -n "${trace:-}" ] && set -o xtrace

case "${DISTRO}" in
	centos)
		if [ -z "${DSU:-}" ]; then
			echo >&2 "FATAL: Unable to obtain current DSU release from '${HWREPO}'"
			exit 1
		fi
		if [ $(( check )) -eq 1 ]; then
			echo "Latest release of Dell iDRAC DSU utilities is v${DSU} for '${DISTRO}' distribution"
			if ! [ "$( $docker image ls -n "localhost/dell-dsu:${DSU}" | wc -l )" = '1' ]; then
				echo "Image 'localhost/dell-dsu:${DSU}' does not exist"
			fi
			exit 0
		fi

		mkdir -p /var/log/dell/dsu /var/log/dell/srvadmin

		if ! [ "$( $docker image ls -n "localhost/dell-dsu:${DSU}" | wc -l )" = '1' ]; then
			echo "Building Dell iDRAC DSU utilities v${DSU} for '${DISTRO}' distribution ..."

			trap '' INT
			$docker ${root:+--root "${root}"} image pull "$(
				grep -- '^ARG BASEOS=' "Dockerfile.${DISTRO}" |
				cut -d'"' -f 2
			):${CENTOS:-$(
				grep -- '^ARG OSVER=' "Dockerfile.${DISTRO}" |
				cut -d'"' -f 2
			)}"
			trap - INT

			$docker ${root:+--root "${root}"} image build \
					--build-arg DSU="${DSU}" \
					--build-arg OSVER="${CENTOS}" \
					--build-arg REPO="${HWREPO}" \
					--build-arg SET_TERM="${TERM}" \
					--compress \
					--file "Dockerfile.${DISTRO}" \
					--squash-all \
					--tag "dell-dsu:${DSU}" \
				.
					#--network slirp4netns \
					#--pull \
		fi

		echo "Running Dell iDRAC DSU utilities v${DSU} for '${DISTRO}' distribution ..."

		trap '' INT
		$docker container stop "dell-dsu-${DSU}" 2>/dev/null || :
		$docker container rm -v "dell-dsu-${DSU}" 2>/dev/null || :
		trap - INT

		# shellcheck disable=SC2046
		$docker container run \
				--device /dev/ipmi0:/dev/ipmi0 \
				--init \
				$( [ -t 0 ] && echo '--interactive' ) \
				${PODMAN_MEMORY_RESERVATION:+--memory-reservation ${PODMAN_MEMORY_RESERVATION}} \
				${PODMAN_MEMORY_LIMIT:+--memory ${PODMAN_MEMORY_LIMIT}} \
				${PODMAN_SWAP_LIMIT:+--memory-swap ${PODMAN_SWAP_LIMIT}} \
				--mount type=bind,source=/var/log/dell,destination=/var/log \
				--mount type=bind,source=/var/log/dell/dsu,destination=/usr/libexec/dell_dup \
				--mount type=bind,source=/var/log/dell/srvadmin,destination=/opt/dell/srvadmin/var/log \
				--volume "${devlog}":/dev/log \
				--name="dell-dsu-${DSU}" \
				--privileged \
				--rm \
				$( [ -t 0 ] && echo '--tty' ) \
			"dell-dsu:${DSU}" "${@}"
				#--detach \
				#--network slirp4netns \
				#--publish-all \
				#--publish 1311:1311 \
				#--restart=always \
				# sysctl is not virtualised!
				#--sysctl net.ipv6.conf.default.disable_ipv6=1 \
				#--sysctl net.ipv6.conf.all.disable_ipv6=1 \
		;;

	ubuntu)
		if [ -z "${ISM:-}" ]; then
			echo >&2 "FATAL: Unable to obtain current ISM release from '${OMREPO}'"
			exit 1
		fi
		if [ -z "${OSMA:-}" ]; then
			echo >&2 "FATAL: Unable to obtain current OSMA release from '${OMREPO}'"
			exit 1
		fi
		if [ $(( check )) -eq 1 ]; then
			echo "Latest release of Dell iDRAC ISM utilities is v${ISM} for '${DISTRO}' distribution"
			if ! [ "$( $docker image ls -n "localhost/dell-ism:${ISM}" | wc -l )" = '1' ]; then
				echo "Image 'localhost/dell-ism:${ISM}' does not exist"
			fi
			exit 0
		fi

		mkdir -p /var/log/dell/ism

		if ! [ "$( $docker image ls -n "localhost/dell-ism:${ISM}" | wc -l )" = '1' ]; then
			echo "Building Dell iDRAC ISM utilities v${ISM} for '${DISTRO}' distribution ..."

			trap '' INT
			$docker ${root:+--root "${root}"} image pull "$(
				grep -- '^ARG BASEOS=' "Dockerfile.${DISTRO}" |
				cut -d'"' -f 2
			):${UBUNTU:-$(
				grep -- '^ARG OSVER=' "Dockerfile.${DISTRO}" |
				cut -d'"' -f 2
			)}"
			trap - INT

			# shellcheck disable=SC2086
			$docker ${root:+--root "${root}"} image build \
					--build-arg ISM="${ISM}" \
					--build-arg OSMA="${OSMA}" \
					--build-arg OSVER="${UBUNTU}" \
					--build-arg REPO="${OMREPO}" \
					--build-arg SET_TERM="${TERM}" \
					--compress \
					--file "Dockerfile.${DISTRO}" \
					  ${extra_build_args} \
					--squash-all \
					--tag "dell-ism:${ISM}" \
				.
					#--network slirp4netns \
					#--pull \
		fi

		echo "Running Dell iDRAC ISM utilities v${ISM} for '${DISTRO}' distribution ..."

		trap '' INT
		$docker container stop "dell-ism-${ISM}" 2>/dev/null || :
		$docker container rm -v "dell-ism-${ISM}" 2>/dev/null || :
		trap - INT

		$docker container run \
				--detach \
				--device /dev/ipmi0:/dev/ipmi0 \
				--init \
				${PODMAN_MEMORY_RESERVATION:+--memory-reservation ${PODMAN_MEMORY_RESERVATION}} \
				${PODMAN_MEMORY_LIMIT:+--memory ${PODMAN_MEMORY_LIMIT}} \
				${PODMAN_SWAP_LIMIT:+--memory-swap ${PODMAN_SWAP_LIMIT}} \
				--mount type=bind,source=/var/log/dell/,destination=/var/log \
				--mount type=bind,source=/var/log/dell/ism/,destination=/opt/dell/srvadmin/iSM/var/log \
				--mount type=bind,source=/lib/modules/,destination=/lib/modules,ro \
				--name="dell-ism-${ISM}" \
				--network host \
				--privileged \
				--rm \
				--volume "${devlog}":/dev/log \
			"dell-ism:${ISM}" "${@}"
				#--publish-all \
				#--restart=always \
				# Can no longer use 'cap-add' with 'privileged'
				#--cap-add SYS_RAWIO \
				#--cap-add IPC_LOCK \
				# sysctl is not virtualised!
				#--sysctl net.ipv6.conf.default.disable_ipv6=1 \
				#--sysctl net.ipv6.conf.all.disable_ipv6=1 \
		;;
esac

# vi: set syntax=sh:
